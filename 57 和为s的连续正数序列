什么是滑动窗口
滑动窗口可以看成数组中框起来的一个部分。在一些数组类题目中，我们可以用滑动窗口来观察可能的候选结果。
当滑动窗口从数组的左边滑到了右边，我们就可以从所有的候选结果中找到最优的结果。

对于这道题来说，数组就是正整数序列 [1,2,3,…,n]。我们设滑动窗口的左边界为 i，
右边界为 jj，则滑动窗口框起来的是一个左闭右开区间 [i, j)。注意，为了编程的方便，
滑动窗口一般表示成一个左闭右开区间。在一开始，i=1, j=1，滑动窗口位于序列的最左侧，窗口大小为零。



滑动窗口的重要性质是：窗口的左边界和右边界永远只能向右移动，而不能向左移动。
这是为了保证滑动窗口的时间复杂度是 O(n)。如果左右边界向左移动的话，这叫做“回溯”，
算法的时间复杂度就可能不止 O(n)。

在这道题中，我们关注的是滑动窗口中所有数的和。当滑动窗口的右边界向右移动时，
也就是 j = j + 1，窗口中多了一个数字 j，窗口的和也就要加上 j。
当滑动窗口的左边界向右移动时，也就是 i = i + 1，窗口中少了一个数字 i，
窗口的和也就要减去 i。滑动窗口只有 右边界向右移动（扩大窗口） 和 左边界向右移动（缩小窗口） 两个操作，
所以实际上非常简单。
class Solution {
public:
    vector<vector<int>> findContinuousSequence(int target) {
    int i=1,j=1,sum=0;
    vector<vector<int>> res;
    while(i<=target/2)
    {
        if(sum<target)
        {
           sum+=j;
           j++;
        }
        if(sum>target)
        {
            sum-=i;
            i++;
        }
        else
        {
        vector<int> arr;
            for(int k=i;k<j;k++)
            {
             arr.push_back(k);             
            }
            sum-=i;
            i++;
        }
        res.push_back(arr);
}
return res;
    }
    
};
