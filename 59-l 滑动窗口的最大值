双端队列
  双端队列用来保存可能是最大值的数字的index。当前窗口最大值的index在队首
  当窗口滑动时，会进入一个新值，出去一个旧值，我们需要给出当前窗口的最大值。
  1、需要检查队首（上一窗口的最大值）的index是否还在当前窗口内，如果不在的话需要淘汰
  2、然后新进入的值要和队尾元素作比较，如果比对位元素大，那么队尾元素出队（用到双端队列特性的地方），
    直到队列为空或者前面的值不比他小为止。
    
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        
        vector<int> res;
        int len = nums.size();
        if(len<1||k<1) return res;
        // 初始化
        deque<int> dq; // 存放的是index
        for(int i=0;i<k-1;i++){
            // 初始化时不需要判断队首不在窗口内
            while(!dq.empty()&&nums[i]>nums[dq.back()]) dq.pop_back();
            dq.push_back(i);
        }
        for(int i=k-1;i<len;i++){ // 放入第k个值，就可以开始输入结果了
            // 检查队首是否在窗口内
            if(!dq.empty()&&(dq.front()<i-k+1)) dq.pop_front();
            //将新进数字和队尾端元素进行判断 小于的话直接进队 
            while(!dq.empty()&&nums[i]>nums[dq.back()]) dq.pop_back();
            dq.push_back(i);
            res.push_back(nums[dq.front()]);
        }
        return res;
    }
};
