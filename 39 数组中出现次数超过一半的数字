解题思路：
本题常见解法如下：

哈希表统计法： 遍历数组 nums ，用 HashMap 统计各数字的数量，最终超过数组长度一半的数字则为众数。此方法时间和空间复杂度均为 O(N)。
数组排序法： 将数组 nums 排序，由于众数的数量超过数组长度一半，因此 数组中点的元素 一定为众数。此方法时间复杂度 O(N log_2 N)。
摩尔投票法： 核心理念为 “正负抵消” ；时间和空间复杂度分别为 O(N) 和 O(1) ；是本题的最佳解法。
摩尔投票法：
票数和： 由于众数出现的次数超过数组长度的一半；若记 众数 的票数为 +1 ，非众数 的票数为 −1 ，则一定有所有数字的 票数和 >0 。
票数正负抵消： 设数组 nums 中的众数为 x ，数组长度为 n 。若 nums 的前 a 个数字的 票数和 = 0 ，则 数组后 (n−a) 个数字的 票数和一定仍 >0 （即后 (n−a) 个数字的 众数仍为 xx ）

算法原理：
为构建正负抵消，假设数组首个元素 n_1为众数，遍历统计票数，当发生正负抵消时，剩余数组的众数一定不变 ，这是因为（设真正的众数为 x ）：
当 n_1 = x： 抵消的所有数字中，有一半是众数 x 。
当 n_1 ！= x ： 抵消的所有数字中，少于或等于一半是众数 x 。
利用此特性，每轮假设都可以 缩小剩余数组区间 。当遍历完成时，最后一轮假设的数字即为众数（由于众数超过一半，最后一轮的票数和必为正数）。
算法流程:
初始化： 票数统计 votes = 0 ， 众数 x；
循环抵消： 遍历数组 nums 中的每个数字 num ；
当 票数 votes 等于 0 ，则假设 当前数字 num 为 众数 x ；
当 num = x 时，票数 votes 自增 1 ；否则，票数 votes 自减 1 。
返回值： 返回 众数 x 即可。

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        //1排序法
        /*sort(nums.begin(),nums.end());
        return nums[nums.size()/2];*/

        //2hash表法
        /*unordered_map<int,int> m;
        for(auto it:nums)
        {
            m[it]++;
            if(m[it]>nums.size()/2) return it;
        }
        return 0;*/
     
       //3摩尔投票法
       /*int x=0,votes=0,count=0;
       for(int num:nums)
       {
           if(votes==0) x=num;
           votes+=num==x?1:-1;
       }
       for(int num:nums)
       if(num==x) count++;
       return count>nums.size()/2?x:0;*/
    }
};
