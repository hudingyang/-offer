解题思路：
后序遍历定义： [ 左子树 | 右子树 | 根节点 ] ，即遍历顺序为 “左、右、根” 。
二叉搜索树定义： 左子树中所有节点的值 << 根节点的值；右子树中所有节点的值 >> 根节点的值；其左、右子树也分别为二叉搜索树。

方法一：递归分治
    根据二叉搜索树的定义，可以通过递归，判断所有子树的 正确性 （即其后序遍历是否满足二叉搜索树的定义） ，若所有子树都正确，则此序列为二叉搜索树的后序遍历。
递归解析：
    终止条件： 当 i≥j ，说明此子树节点数量≤1 ，无需判别正确性，因此直接返回 true ；
递推工作：
    划分左右子树： 遍历后序遍历的 [i,j] 区间元素，寻找 第一个大于根节点 的节点，索引记为 m 。此时，可划分出左子树区间 [i,m−1] 、右子树区间 [m,j−1] 、根节点索引 jj 。
    判断是否为二叉搜索树：
    左子树区间 [i,m−1] 内的所有节点都应 <postorder[j] 。而第 1.划分左右子树 步骤已经保证左子树区间的正确性，因此只需要判断右子树区间即可。
    右子树区间 [m, j-1] 内的所有节点都应 >postorder[j] 。实现方式为遍历，当遇到 postorder[j]≤postorder[j] 的节点则跳出；则可通过 p=j 判断是否为二叉搜索树。
返回值： 所有子树都需正确才可判定正确，因此使用 与逻辑符 && 连接。
    p = j ： 判断 此树 是否正确。
    recur(i, m - 1) ： 判断 此树的左子树 是否正确。
    recur(m, j - 1) ： 判断 此树的右子树 是否正确。

class Solution {
public:
    bool verifyPostorder(vector<int>& postorder) {
        bool res = true;
        if (postorder.empty())
            return res;
        res = helper(postorder,0,postorder.size()-1);
        return res;
    }
    bool helper(vector<int>& postorder, int start, int end)
    {
        if (postorder.empty() || start > end)
            return true;
        //根结点
        int root = postorder[end];

        //在二叉搜索树中左子树的结点小于根结点
        int i = start;
        for(;i<end;i++)
        {
            if (postorder[i] > root)
                break;
        }

        //在二叉搜索书中右子树的结点大于根结点
        for(int j = i;j<end;j++)
        {
            if (postorder[j] < root)
                return false;
        }

        //判断左子树是不是二叉搜索树
        bool left = true;
        if (i>start)
        {
            left = helper(postorder,start,i-1);
        }
        //判断右子树是不是二叉搜索树
        bool right = true;
        if (i<end-1)
        {
            right = helper(postorder, i,end-1);
        }
        return left &&  right;
    }
};
