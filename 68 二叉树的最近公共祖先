解题思路：//二叉搜索树的最近公共祖先
1. 二叉搜索树
因为二叉树搜索树节点有序，所以问题变得简单。如果节点p比当前节点小，则说明节点p在当前节点的左子树；
如果节点p比当前节点大，则说明节点p在当前节点的右子树。

代码思路为：
如果p q的值都小于当前节点的值，则递归进入当前节点的左子树；
如果p q的值都大于当前节点的值，则递归进入当前节点的右子树；
如果当前节点的值在p q两个节点的值的中间，那么这两个节点的最近公共祖先则为当前的节点。


祖先的定义： 若节点 p 在节点 root 的左（右）子树中，或 p =root ，则称 root 是 p 的祖先。

最近公共祖先的定义： 设节点 root 为节点 p,q 的某公共祖先，若其左子节点 root.left 和右子节点 root.right 都不是 p,q 的公共祖先，则称 root 是 “最近的公共祖先” 。

根据以上定义，若 root 是 p,q 的 最近公共祖先 ，则只可能为以下情况之一：
  p 和 q 在 root 的子树中，且分列 root 的 异侧（即分别在左、右子树中）；
  p=root ，且 q 在 root 的左或右子树中；
  q=root ，且 p 在 root 的左或右子树中；
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 递归法
/*class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(p->val<root->val&&q->val<root->val)
            return lowestCommonAncestor(root->left, p, q);
        if(p->val>root->val&&q->val>root->val)
            return lowestCommonAncestor(root->right, p, q);
        return root;
    }
};*/
//迭代法
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
       if(p->val>q->val)
       {
           TreeNode* tmp=p;
           p=q;
           q=tmp;
       }
       while(root!=nullptr)
       {
           if(p->val>root->val)
                root=root->right;
            if(q->val<root->val)
                root=root->left;
            else break;
       }
       return root;
    }
};

2. 普通二叉树
//解题思路：//普通二叉树的最近公共祖先
解题思路：
祖先的定义： 若节点 p 在节点 root 的左（右）子树中，或 p=root ，则称 root 是 p 的祖先。

最近公共祖先的定义： 设节点 root 为节点 p,q 的某公共祖先，若其左子节点 root.left 和右子节点root.right 都不是 p,q 的公共祖先，则称 root 是 “最近的公共祖先” 。

根据以上定义，若 root 是 p,q 的 最近公共祖先 ，则只可能为以下情况之一：

p 和 q 在 root 的子树中，且分列 root 的 异侧（即分别在左、右子树中）；
p=root ，且 q 在 root 的左或右子树中；
q=root ，且 p 在 root 的左或右子树中

考虑通过递归对二叉树进行后序遍历，当遇到节点 p 或 q 时返回。从底至顶回溯，当节点 p,q 在节点 root 的异侧时，节点 root 即为最近公共祖先，则向上返回 root 。

递归解析：
终止条件：
当越过叶节点，则直接返回 null ；
当 root 等于 p,q ，则直接返回 root ；
递推工作：
开启递归左子节点，返回值记为 left ；
开启递归右子节点，返回值记为 right ；
返回值： 根据 left 和 right ，可展开为四种情况；
当 left 和 right 同时为空 ：说明 root 的左 / 右子树中都不包含 p,q ，返回 null ；
当 left 和 right 同时不为空 ：说明 p,q 分列在 root 的 异侧 （分别在 左 / 右子树），因此 root 为最近公共祖先，返回 root ；
当 left 为空 ，right 不为空 ：p,q 都不在 root 的左子树中，直接返回 right 。具体可分为两种情况：
p,q 其中一个在 root 的 右子树 中，此时 right 指向 p（假设为 p ）；
p,q 两节点都在 root 的 右子树 中，此时的 right 指向 最近公共祖先节点 ；
当 left 不为空 ， right 为空 ：与情况 3. 同理；


在二叉搜索树时，我们可以通过判断节点p的值与当前节点的值，来判断节点p是否在当前节点的左右子树。
对于普通二叉树我们其实也可以利用递归来实现。

代码思路为：
递归查询两个节点p q，如果某个节点等于节点p或节点q，则返回该节点的值给父节点。
如果当前节点的左右子树分别包括p和q节点，那么这个节点必然是所求的解。
如果当前节点有一个子树的返回值为p或q节点，则返回该值。（告诉父节点有一个节点存在其子树中）
如果当前节点的两个子树返回值都为空，则返回空指针。


class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root == NULL)return NULL;        
        if(root == p||root == q)return root;
        TreeNode* left = lowestCommonAncestor(root->left, p, q);
        TreeNode* right = lowestCommonAncestor(root->right, p, q);
        if(left && right)return root;
        return left ? left : right; // 只有一个非空则返回该指针，两个都为空则返回空指针
    }
};
