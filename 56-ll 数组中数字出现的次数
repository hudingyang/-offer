解法1：哈希表
  1、统计所有数字出现的次数，采用key、value的方式存在哈希表中
  2、扫描哈希表，找出只出现一次的那个数字
class Solution {
public:
    int singleNumber(vector<int>& nums) {
       unordered_map<int,int> mp;
       for(int n:nums)
          mp[n]++;
       int ans;
       for(auto ptr:mp)
       {
          if(ptr.second==1)
          {
            ans=ptr.first;
            break;
          }
       }
       return ans;
    }
};

解法2：模拟三进制
  1、记录每一个不为0的数字出现的次数
  2、如果出现的次数对3取模为1，则说明只出现一次的数字此位也是 1.
  3、将所有模为1的位相加，得到最终的结果
  class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int ans=0;
        for(int i=0;i<32;i++)
        {
            int count=0;
            for(auto n:nums)
            {
                if((1<<i)&n) count++;//统计每个二进制位数的某一位为1的个数
            }
            if(count%3) ans+=(1<<i);
        }
        return ans;
    }
};

解法3：状态机
    初始:0 0
    1个1：0 1
    2个1：1 0
    3个1：0 0
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int one=0,two=0;
        for(auto n:nums)
        {
            one=(one^n)&~two;
            two=(two^n)&~one;
        }
        return one;
        }
};
