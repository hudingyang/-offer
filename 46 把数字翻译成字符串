动态规划解析：
记数字 num 第 i 位数字为x_i ，数字 num 的位数为 n ；
例如： num = 12258 的 n=5 , x_1 = 1

状态定义： 设动态规划列表 dp ，dp[i] 代表以 x_i为结尾的数字的翻译方案数量。

转移方程： 若 x_i和x_i−1组成的两位数字可以被翻译，则 dp[i]=dp[i−1]+dp[i−2] ；否则 dp[i]=dp[i−1] 。

可被翻译的两位数区间：当 x_i−1=0 时，组成的两位数是无法被翻译的（例如 00, 01, 02,,⋯ ），因此区间为 [10,25] 。
即：dp[i] = dp[i - 1] + dp[i - 2] 
其他状态为：dp[i] = dp[i - 1]
初始状态： dp[0]=dp[1]=1 ，即 “无数字” 和 “第 1 位数字” 的翻译方法数量均为 1 ；

返回值： dp[n] ，即此数字的翻译方案数量。

Q： 无数字情况 dp[0]=1 从何而来？
A： 当 num 第 1,2 位的组成的数字∈[10,25] 时，显然应有 2 种翻译方法，
即 dp[2]=dp[1]+dp[0]=2 ，而显然 dp[1]=1 ，因此推出 dp[0] = 1 。

//动态规划
class Solution {
public:
    int translateNum(int num) {
        string str=to_string(num);
        int dp[11];
        dp[0]=1;
        dp[1]=1;
        
        for(int i=1;i<str.siez();i++)
        {
            if(str[i-1]=='0'||str.substr(i-1,2)>"25")
            {
                dp[i+1]=dp[i];
            }
            else 
                dp[i+1]=dp[i]+dp[i-1];
        }
        return dp[str.size()];
    }
};
回溯
绝大部分树形问题（多叉树或者是二叉树）都可以通过回溯解决，
而这道题抽象为树模型后就是：求一颗二叉树从根结点到达叶子结点的路径总数。

因为每次可能的选择都只有两个，犹如二叉树的两个分支。栗如：
对于数字 13 ，你第一次可以只选择一位，那就是 1 ，翻译成字符就是 b；你也可以两位都选，那就是 13 , 翻译成字符为 n。

所以最多就只有两个选择：走左子树或走右子树，走到叶子结点就返回 1 ，代表这条路径可以到达终点。
class Solution {
public:
    int backtrace(string& num,int pos)
    {
        int n=str.size();
        if(pos==n)
            return 1;
        if(pos==n-1||str[pos]=='0'||str.substr(po2,2)>"25")
        {
            return backtrace(num,pos+1);
        }
        return backtrace(num,pos+1) + backtrace(num,pos+2);
    }
    int translateNum(int num) {
        string str = to_string(num);
        return backtrace(str, 0);
    }
};
