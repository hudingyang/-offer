解题思路
思路很简单，我们尝试按照 popped 中的顺序模拟一下出栈操作，如果符合则返回 true，否则返回 false。
这里用到的贪心法则是如果栈顶元素等于 popped 序列中下一个要 pop 的值，则应立刻将该值 pop 出来。

我们使用一个栈 st 来模拟该操作。将 pushed 数组中的每个数依次入栈，同时判断这个数是不是 popped 数组中下一个要 pop 的值，
如果是就把它 pop 出来。最后检查栈是否为空。

算法
初始化栈 stack，j = 0；
遍历 pushed 中的元素 x；
当 j < popped.size() 且栈顶元素等于 popped[j]：
弹出栈顶元素；
j += 1；
如果栈为空，返回 True，否则返回 False。
复杂度分析
时间复杂度：O(N)。将所以元素一遍入栈，一遍出栈，需要 O(2N)。
空间复杂度：O(N)。使用了辅助栈 st。
class solution
{
public:
    bool validateStackSequences(vector<int>& pushed, vector<int>& popped) 
    {
        stack<int> st;
        int n=popped.size();
        int j;
        for(int i=0;i<n;i++)
        {
          st.push(pushed[i];
          while(!st.empty()&&st.top()==popped[j])
          {
              st.pop();
              j++;
          }
        }
        return st.empty();
    }
};
