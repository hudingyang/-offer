首尾双指针
定义头指针 left ，尾指针 right .
left 一直往右移，直到它指向的值为偶数
right 一直往左移， 直到它指向的值为奇数
交换 nums[left] 和 nums[right] .
重复上述操作，直到 left==right .

class solution
{
public:
      vector<int> exchange(vector<int>& nums)
      {
          int left=0,right=nums.size()-1;
          while(left<right)
          {
              if((nums[left]&1) !=0)
              {
                    left++;
                    continue;
              }
              if((nums[right]&1) !=1)
              {
                  right--;
                  conntinue;
              }
              swap(nums[left++],nums[right]--);
          }
          return nums;
      }
};

快慢双指针
定义快慢双指针 fast 和 low ，fast 在前， low 在后 .
fast 的作用是向前搜索奇数位置，low 的作用是指向下一个奇数应当存放的位置
fast 向前移动，当它搜索到奇数时，将它和 nums[low] 交换，此时 low 向前移动一个位置 .
重复上述操作，直到 fast 指向数组末尾 .

class solution
{
public:
    vector<int> exchange(vector<int>& nums)
    {
        int low=0,fast=0;
        while(fast<nums.size())
        {
          if((nums[fast]&1)//如果nums[fast]为奇数
          {
              swap(nums[low],nums[fast]);
              low++;
          }
          fast++;
        }
        return nums;
    }
};
