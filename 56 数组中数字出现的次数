class Solution {
public:
    //输入: [1,2,1,3,2,5]
    //输出: [3,5]
    vector<int> singleNumbers(vector<int>& nums) {
        int s = 0;
        for (int num : nums) {
            s ^= num;
        }
        //s是只出现一次的2个数字的^ 记做数字a,b
        //既然a,b 不一样，那么s肯定不是0，那么s的二进制肯定至少有1位（第n位）是1，只有0^1才等于1
        //所以a,b 在第n位，要么a是0，b是1 ，要么b是0，a是1    ---->A
        //s = 3 ^ 5; 0011 ^ 0101 = 0110 = 6
        //假设int是8位
        //-6  原码1000 0110
        //    反码1111 1001
        //    补码1111 1010
        //s & (-s) 
        //  0000 0110
        //& 1111 1010
        //  0000 0010
        //所以k = s & (-s) 就是保留s的最后一个1，并且将其他位变为0  也就是s最后一个1是倒数第二位   --->B
        //由于s & (-s)很方便找到一个1 所以用他了，其实找到任何一个1都可以
        //根据A和B  我们可以确定 3 和 5 必定可以分到 不同的组里
        //同理 1和1 由于二进制完全相同，所有必定分到相同的组里
        int k = s & (-s);
        //1  0001  第一组
        //2  0010  第二组
        //1  0001  第一组
        //3  0011  第二组
        //2  0010  第二组
        //5  0101  第一组
        //第一组 1 1 5  第二组 2 3 2 这样我们就将2个只有一个的数 分到了2个数组里了
        vector<int> rs(2,0);
        for(int num : nums){
            if(num & k){
                //第二组
                rs[0] ^= num;
            }else{
                //第一组
                rs[1] ^= num;
            }
        }
        return rs;
    }
};


//分组异或
考虑异或操作的性质：对于两个操作数的每一位，相同结果为 0，不同结果为 1。那么在计算过程中，成对出现的数字的所有位会两两抵消为 0，最终得到的结果就是那个出现了一次的数字。

如何实现分组？
记这两个只出现了一次的数字为 a 和 b，那么所有数字异或的结果就等于 a 和 b 异或的结果，我们记为 x。如果我们把 x 写成二进制的形式 ，
按照第 i 位给原来的序列分组，如果该位为 0 就分到第一组，否则就分到第二组，这样就能满足以上两个条件，为什么呢？

 首先，两个相同的数字的对应位都是相同的，所以一个被分到了某一组，另一个必然被分到这一组，所以满足了条件 。	
  不等，根据这个方法的定义「如果该位为 00 就分到第一组，否则就分到第二组」可以知道它们被分进了两组，所以满足了条件 。
  class Solution {
public:
    vector<int> singleNumbers(vector<int>& nums) {
        int ret=0;
        for(int num:nums)
          ret^=num;
        int div=1;
        while((div&ret)==0)
          div<<=1;
        int a=0;
        int b=0;
        for(int num:nums)
        {
            if(div&num)
                a^=num;
            else{
                b^=num;
            }
        }
        return vector<int>{a,b};
    }
};
