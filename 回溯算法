解决一个回溯问题，实际就是一个决策树的遍历过程。只需要思考3个问题
1、路径：也就是已经做出来的选择。
2、选择列表：也就是当前你可以做的选择
3、结束条件：也就是到达决策树底层，无法在作出选择。

代码方面，回溯算法的框架：
result = []
def backrack(路径，选择列表)：
    if 满足结束条件
        result.add(路径)
        return
    for 选择 in 选择列表
        做选择
        backtrack(路径，选择列表)
        撤销选择
 其核心就是 for 循环里面的递归，在递归调用之前「做选择」，在递归调用之后「撤销选择」。
 
 定义的 backtrack 函数其实就像一个指针，在这棵树上游走，同时要正确维护每个节点的属性，
 每当走到树的底层，其「路径」就是一个全排列。
 
 各种搜索问题其实都是树的遍历问题，而多叉树的遍历框架就是这样：
 void traverse(TreeNode root)
 {
    for(TreeNode child : root.childern)
      //前序遍历需要的操作
      traverse(child)
      //后续遍历需要的操作
 }
 前序遍历的代码在进入某一个节点之前的那个时间点执行，
 后序遍历代码在离开某个节点之后的那个时间点执行。

  回想我们刚才说的，「路径」和「选择」是每个节点的属性，函数在树上游走要正确维护节点的属性，
  那么就要在这两个特殊时间点搞点动作：

for 选择 in 选择列表:
    # 做选择
    将该选择从选择列表移除
    路径.add(选择)
    backtrack(路径, 选择列表)
    # 撤销选择
    路径.remove(选择)
    将该选择再加入选择列表

只要在递归之前做出选择，在递归之后撤销刚才的选择，就能正确得到每个节点的选择列表和路径。
 
 一、全排列问题
 
/*主函数，输入一组不重复的数字，返回他们的全排列*/
List<List<Integer>> permute(int[] nums)
{
    //记录 路径
    LinkedList<Integer> track = new LinkedList<>();
    
    backtrack(nums,track);
    return res;
}

//路径：记录在track中
//选择列表：nums中不存在于track的那些元素
//结束条件：nums中的元素全部都子啊track中出现
void backtrack(int[] nums,LinkedList<Integer> track)
{
     // 触发结束条件
    if (track.size() == nums.length) {
        res.add(new LinkedList(track));
        return;
    }
    
    for (int i = 0; i < nums.length; i++) {
        // 排除不合法的选择
        if (track.contains(nums[i]))
            continue;
        // 做选择
        track.add(nums[i]);
        // 进入下一层决策树
        backtrack(nums, track);
        // 取消选择
        track.removeLast();
    }
}
 
 二、N 皇后问题
这个问题很经典了，简单解释一下：给你一个 N×N 的棋盘，让你放置 N 个皇后，使得它们不能互相攻击。

PS：皇后可以攻击同一行、同一列、左上左下右上右下四个方向的任意单位。

这个问题本质上跟全排列问题差不多，决策树的每一层表示棋盘上的每一行；每个节点可以做出的选择是，
在该行的任意一列放置一个皇后。

直接套用框架:
vector<vector<string>> res;

/* 输入棋盘边长 n，返回所有合法的放置 */
vector<vector<string>> solveNQueens(int n) {
    // '.' 表示空，'Q' 表示皇后，初始化空棋盘。
    vector<string> board(n, string(n, '.'));
    backtrack(board, 0);
    return res;
}

// 路径：board 中小于 row 的那些行都已经成功放置了皇后
// 选择列表：第 row 行的所有列都是放置皇后的选择
// 结束条件：row 超过 board 的最后一行
void backtrack(vector<string>& board, int row) {
    // 触发结束条件
    if (row == board.size()) {
        res.push_back(board);
        return;
    }
    
    int n = board[row].size();
    for (int col = 0; col < n; col++) {
        // 排除不合法选择
        if (!isValid(board, row, col)) 
            continue;
        // 做选择
        board[row][col] = 'Q';
        // 进入下一行决策
        backtrack(board, row + 1);
        // 撤销选择
        board[row][col] = '.';
    }
}
这部分主要代码，其实跟全排列问题差不多，isValid 函数的实现也很简单：
/* 是否可以在 board[row][col] 放置皇后？ */
bool isValid(vector<string>& board, int row, int col) {
    int n = board.size();
    // 检查列是否有皇后互相冲突
    for (int i = 0; i < n; i++) {
        if (board[i][col] == 'Q')
            return false;
    }
    // 检查右上方是否有皇后互相冲突
    for (int i = row - 1, j = col + 1; 
            i >= 0 && j < n; i--, j++) {
        if (board[i][j] == 'Q')
            return false;
    }
    // 检查左上方是否有皇后互相冲突
    for (int i = row - 1, j = col - 1;
            i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] == 'Q')
            return false;
    }
    return true;
}



有的时候，我们并不想得到所有合法的答案，只想要一个答案，怎么办呢？比如解数独的算法，
找所有解法复杂度太高，只要找到一种解法就可以。
其实特别简单，只要稍微修改一下回溯算法的代码即可：
// 函数找到一个答案后就返回 true
bool backtrack(vector<string>& board, int row) {
    // 触发结束条件
    if (row == board.size()) {
        res.push_back(board);
        return true;
    }
    ...
    for (int col = 0; col < n; col++) {
        ...
        board[row][col] = 'Q';

        if (backtrack(board, row + 1))
            return true;
        
        board[row][col] = '.';
    }

    return false;
}
