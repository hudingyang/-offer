删除值为 val 的节点可分为两步：定位节点、修改引用。
    定位节点： 遍历链表，直到 head.val == val 时跳出，即可定位目标节点。
    修改引用： 设节点 cur 的前驱节点为 pre ，后继节点为 cur.next ；则执行 pre.next = cur.next ，即可实现删除 cur 节点。

算法流程：
    特例处理： 当应删除头节点 head 时，直接返回 head.next 即可。
    初始化： pre = head , cur = head.next 。
    定位节点： 当 cur 为空 或 cur 节点值等于 val 时跳出。
    保存当前节点索引，即 pre = cur 。
    遍历下一节点，即 cur = cur.next 。
    删除节点： 若 cur 指向某节点，则执行 pre.next = cur.next ；当 cur 指向 null 时，代表链表中不包含目标节点。
    返回值： 返回链表头部节点 head 即可。
    
    在C++中设置一个虚拟头节点，使得dummy->next=head，以此来省去特里处理。
    class solution
    {
      public:
        ListNode* deleteNode(ListNode* head,int val)
        {
            ListNode* dummy = new ListNode(0);//构建虚拟头节点
            dummy->next=head;
            ListNode* pre=dummy;
            
            while(pre&&pre->next)//从虚拟头结点之后的头结点开始搜索
            {
                if(pre->next->val==val)
                {
                    ppre->next=pre->next->next; //删除
                    break;//删除之后跳出循环
                }
                pre=pre->next;//向后搜索
            }
            return dummy->next; //返回头节点
        }
    };
