解题思路：
    暴力搜索：时间复杂度：O(N^2);空间复杂度：O(1)
    分治思想：时间复杂度：O(N*logN);空间复杂度：O(logN)
    动态规划：时间复杂度：O(N);空间复杂度：O(1)
动态规划解析：
状态定义： 设动态规划列表 dp ，dp[i] 代表以元素 nums[i] 为结尾的连续子数组最大和。

为何定义最大和 dp[i] 中必须包含元素 nums[i] ：保证 dp[i] 递推到 dp[i+1] 的正确性；如果不包含 nums[i] ，递推时则不满足题目的 连续子数组 要求。
转移方程： 若 dp[i−1]≤0 ，说明 ddp[i−1] 对 dp[i] 产生负贡献，即 dp[i−1]+nums[i] 还不如 nums[i] 本身大。

当 dp[i - 1] > 0 时：执行 dp[i] = dp[i-1] + nums[i] ；
当 dp[i−1]≤0 时：执行 dp[i]=nums[i] ；
初始状态： dp[0]=nums[0]，即以 nums[0] 结尾的连续子数组最大和为 nums[0] 。

返回值： 返回 dp 列表中的最大值，代表全局最大值。

空间复杂度降低：
由于 dp[i] 只与 dp[i−1] 和 nums[i] 有关系，因此可以将原数组 nums 用作 dp 列表，即直接在 nums 上修改即可。
由于省去 dp 列表使用的额外空间，因此空间复杂度从 O(N) 降至 O(1) 。
复杂度分析：

时间复杂度 O(N) ： 线性遍历数组 nums 即可获得结果，使用 O(N) 时间。
空间复杂度 O(1) ： 使用常数大小的额外空间。

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int res=nums[0];
        for(int i=1;i<nums.size();i++)
        {
            if(nums[i-1]>0)
            {
                nums[i]+=nums[i-1];
            }
            res=max(nums[i],res);
        }
        return res;
    }
};


//贪心法：
思路：当叠加的和小于0时，就从下一个数重新开始，同时更新最大和的值(最大值可能为其中)，
      当叠加和大于0时，讲下一个数值加入和中，同时更新最大和值，依次继续。
    int Solution42::maxSubArray(std::vector<int> &nums) {
    assert(!nums.empty());
    int resSum = INT_MIN;
    int curSum = 0;
    // 遍历数组
    for (int i = 0; i < nums.size(); i++) {
        // 当sum小于0时，就从下一个数重新开始
        // 同时更新每次叠加的最大值
        if (curSum <= 0) {
            curSum = nums[i];
        } else {
            // 和大于0时
            curSum += nums[i];
        }
        // 不断更新子串的最大值
        if (curSum > resSum) {
            resSum = curSum;
        }
    }
    return resSum;
}

//分治法：
/*
 * 方法二 分治法 O(nlogn)
 *
 * 分治法模板：
 * 1. 定义基本情况
 * 2. 将问题分解为子问题并递归解决子问题
 * 3. 合并子问题的解以获得原始问题的解
 *
 * 将nums由中点mid分为三种情况：
 * 1. 最大子串在左边
 * 2. 最大子串在右边
 * 3. 最大子串跨中点，左右都有
 *
 * 当子串在左边或右边时，继续分中点递归分解到一个数为止，
 * 对于递归后横跨的子串，再分治为左侧和右侧求最大子串，
 * 可使用贪心算法求最大子串值，再合并为原始的最大子串值
 * */
int maxSubArray2(std::vector<int> &nums) {
    assert(!nums.empty());

    return helper(nums, 0, nums.size() - 1);
}
int helper(std::vector<int> &nums, int left, int right) {
    // 分解到一个值时返回该值
    if (left == right) {
        return nums[left];
    }
    // 求中点值
    int mid = left + (right - left) / 2;

    // 中点左边的最大值
    int leftSum = helper(nums, left, mid);
    // 中点右边的最大值
    int rightSum = helper(nums, mid + 1, right);
    // 横跨中点的最大值
    int croSum = crossSum(nums, left, right, mid);
    // 返回以上三种情况中的最大值
    return std::max(std::max(leftSum, rightSum), croSum);
}
int crossSum(std::vector<int> &nums, int left, int right, int mid) {
    // 分解到一个值时返回该值
    if (left == right) {
        return nums[left];
    }
    // 贪心法求左边的最大值
    int leftSubsum = INT_MIN;
    int curSum = 0;
    for (int i = mid; i > left - 1; i--) {
        curSum += nums[i];
        leftSubsum = std::max(leftSubsum, curSum);
    }
    // 贪心法求右边的最大值
    int rightSubsum = INT_MIN;
    curSum = 0;
    for (int i = mid + 1; i < right + 1; i++) {
        curSum += nums[i];
        rightSubsum = std::max(rightSubsum, curSum);
    }
    return leftSubsum + rightSubsum;
}
