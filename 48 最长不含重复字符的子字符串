思路一：
滑动窗口（双指针）
    题目中要求答案必须是 子串 的长度，意味着子串内的字符在原字符串中一定是连续的。
    因此我们可以将答案看作原字符串的一个滑动窗口，并维护窗口内不能有重复字符，
    同时更新窗口的最大值。
算法：
    1、初始化头尾指针head,tail
    2、tail指针右移，判断tail指针的元素是否在[head:tail]的窗口内
        如果窗口内没有该元素，则加入该元素的窗口，同时更新窗口长度的最大值，tail指针继续后移。
        如果窗口中存在该元素，则将head指针右移，直到窗口中不包含该元素。
    3、返回窗口长度的最大值。
    python:
    class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        head = 0
        tail = 0
        if len(s) < 2: return len(s) # 边界条件
        res = 1
        
        while tail < len(s) - 1:
            tail += 1
            if s[tail] not in s[head: tail]:
                res = max(tail - head + 1, res)
            else:
                while s[tail] in s[head: tail]:
                    head += 1
        return res
        复杂度分析
时间复杂度：O(n^2)。
空间复杂度：O(1)，使用了 head，tail，res。

思路二：
    使用哈希表记录每个字符的下一个索引，然后尽量的右移尾指针来拓展窗口，并更新窗口的长度。
    如果尾指针指向重复元素，则将头指针移动到窗口重复元素的右侧。
算法：
    1、tail指针向末尾反向移动；
    2、如果尾指针指向的元素存在与哈希表中
        head指针跳跃到重复字符的下一位；
    3、更新哈希表和窗口的大小。
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int n=s.size();
        unordered_map<char,int> m;
        int start=0,result=0;
        for(int i=0;i<n;i++)
        {
            if(m.find(s[i])!=m.end())
            {
                start=max(start,m[s[i]]+1);//
            }
            m[s[i]]=i;
            result=max(result,i-start+1);
        }
        return result;
    }
};
