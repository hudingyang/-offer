方法三：两个堆
以上两种方法对如何解决这个问题提供了一些有价值的见解。具体来说，我们可以推断出两件事：

如果我们可以一直直接访问中值元素，那么找到中值将需要一个恒定的时间。
如果我们能找到一种相当快速的方法来增加容器的数量，那么所产生的额外操作可能会减少。
但也许最重要的洞察是我们只需要一种一致的方式来访问中值元素，这是不容易观察到的。不需要对整个输入进行排序。

事实证明，有两种数据结构符合：

堆（或优先级队列）
自平衡二进制搜索树（我们将在方法4中详细讨论它们）
堆是这道题的天然原料！向元素添加元素需要对数时间复杂度。它们还可以直接访问组中的最大/最小元素。

如果我们可以用以下方式维护两个堆：

用于存储输入数字中较小一半的最大堆
用于存储输入数字的较大一半的最小堆
这样就可以访问输入中的中值：它们组成堆的顶部！

如果满足以下条件：

两个堆都是平衡的（或接近平衡的）
最大堆包含所有较小的数字，而最小堆包含所有较大的数字
那么我们可以这样说：

最大堆中的所有数字都小于或等于最大堆的top元素（我们称之为 xx）
最小堆中的所有数字都大于或等于最小堆的顶部元素（我们称之为 yy）
那么 xx 和 yy 几乎小于（或等于）元素的一半，大于（或等于）另一半。这就是中值元素的定义。

这使我们在这种方法中遇到了一个巨大的难题：平衡这两个堆！

算法：

两个优先级队列：
用于存储较小一半数字的最大堆 lo
用于存储较大一半数字的最小堆 hi
最大堆 lo 允许存储的元素最多比最小堆 hi 多一个。因此，如果我们处理了 kk 元素：
如果 k=2*n+1 \quad(\forall,n \in \mathbb z)k=2∗n+1(∀,n∈z) 则允许 lo 持有 n+1n+1 元素，而 hi 可以持有 nn 元素。
如果 k=2*n\quad(\forall,n\in\mathbb z)k=2∗n(∀,n∈z)，那么两个堆都是平衡的，并且每个堆都包含 nn 个元素。
这给了我们一个很好的特性，即当堆完全平衡时，中间值可以从两个堆的顶部派生。否则，最大堆 lo 的顶部保留合法的中间值。

添加一个数 num：
将 num 添加到最大堆 lo。因为 lo 收到了一个新元素，所以我们必须为 hi 做一个平衡步骤。因此，从 lo 中移除最大的元素并将其提供给 hi。
在上一个操作之后，最小堆 hi 可能会比最大堆 lo 保留更多的元素。我们通过从 hi 中去掉最小的元素并将其提供给 lo 来解决这个问题。
class MedianFinder {
    priority_queue<int> lo;                              // max heap
    priority_queue<int, vector<int>, greater<int>> hi;   // min heap

public:
    // Adds a number into the data structure.
    void addNum(int num)
    {
        lo.push(num);                                    // Add to max heap

        hi.push(lo.top());                               // balancing step
        lo.pop();

        if (lo.size() < hi.size()) {                     // maintain size property
            lo.push(hi.top());
            hi.pop();
        }
    }

    // Returns the median of current data stream
    double findMedian()
    {
        return lo.size() > hi.size() ? (double) lo.top() : (lo.top() + hi.top()) * 0.5;
    }
};
