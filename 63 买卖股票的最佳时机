思路（官方题解方法二：一次遍历）  《一次买卖》
遍历一遍数组，计算每次 到当天为止 的最小股票价格和最大利润。
复杂度分析
时间复杂度：O(n)，遍历了一遍数组。
空间复杂度：O(1)，使用了有限的变量。
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int minprice = int(1e9);
        int maxprofit = 0;
        for (auto price : prices){
            maxprofit = max(maxprofit, price - minprice);
            minprice = min(minprice, price);
        }
        return maxprofit;
    }
};

方法二：动态规划
动态规划一般分为一维、二维、多维（使用状态压缩），对应形式为 dp(i)、dp(i)(j)、二进制dp(i)(j)。

1. 动态规划做题步骤

明确 dp(i) 应该表示什么（二维情况：dp(i)(j)）；
根据 dp(i) 和 dp(i−1) 的关系得出状态转移方程；
确定初始条件，如 dp(0)。
2. 本题思路

其实方法一的思路不是凭空想象的，而是由动态规划的思想演变而来。这里介绍一维动态规划思想。
dp[i] 表示前 i 天的最大利润，因为我们始终要使利润最大化，则：

dp[i] = max(dp[i-1], prices[i]-minprice)；

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        if (n == 0) return 0; // 边界条件
        int minprice = prices[0];
        vector<int> dp (n, 0);

        for (int i = 1; i < n; i++){
            minprice = min(minprice, prices[i]);
            dp[i] = max(dp[i - 1], prices[i] - minprice);//
        }
        return dp[n - 1];
    }
};


解题思路《多次买卖》
1.贪心算法
该方法有点奇淫巧计的意味，但是一旦想通便很快就可以完成，且只需要一次遍历。
其主要想法是逢低便买入，逢高便卖出，即只要前一天的价格小于后一天的价格，
那么就可以在前一天买入后一天卖出。相关代码如下：
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        // 贪心算法：一次遍历；逢低便买入，逢高便卖出
        // 只要前一天的价格小于后一天的价格便在前一天买入后一天卖出
        int maxProfit = 0;
        for(int i = 1; i < prices.size(); i++){
            maxProfit += max(prices[i] - prices[i-1], 0);
        }
        return maxProfit;
    }
};


2、动态规划
  第i天仅有两种状态：持有或者不持有
  假设数组dp[i][0]表示第i天不持有股票是的利益：dp[0][0]=0;
  dp[i][1]表示表示第i天持有股票是的利益：dp[0][1]=-prices[0];
  
  持有状态：
    1、今天买入：则昨天是不持有状态，当天利益为：dp[i-1][0]-prices[i];
    2、前一天也持有：今天没有卖出，当天利益为dp[i-1][1];
    取其大者作为当天持有状态下的利益。
  非持有状态：
    1、今天卖出：则昨天是持有的状态，当天利益为dp[i-1][1]+prices[i];
    2、前一天也不持有：则今天也没有买入，当天利益就是前一天利益，即dp[i-1][0];
    取其大者作为当天持有状态下的利益。
    
最后一天不持有股票时的利益即为最大利润。

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        // 动态规划解法
        
        // 0.初始判断
        if(prices.empty()) return 0;
        
        int dp[prices.size()][2];
        // 1.初始状态
        dp[0][0] = 0;
        dp[0][1] = -prices[0];

        // 2.状态转移
        for(int i = 1; i<prices.size();i++){
            // 3.状态转移方程
            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i]);//两张状态：1、前一天不持有，今天没有买，还是保持前一天的。2、前一天持有，当天卖出
            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i]);//两种状态，1、前一天持有，今天没有卖，还是保持前一天的。2、前一天没有，当天买入
        }
        return dp[prices.size()-1][0];
    }
};
